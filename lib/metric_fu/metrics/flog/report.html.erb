<h3>Flog Results</h3>
<p><a href='http://ruby.sadi.st/Flog.html'>Flog</a> measures code complexity.</p>

<%= render_partial 'graph', {:graph_name => 'flog'} %>

<h2>Total Flog score for all methods: <%= round_to_tenths @flog[:total]%></h2>
<h2>Average Flog score for all methods: <%= round_to_places(@flog[:average], 4)%></h2>

<script type="text/javascript">
var ascs = [1, 1, 1, 1, 1];

function sort_table(tbody, col) {
    var asc = ascs[col];
    for(i = 0; i < ascs.length; i++){
        if (col == i) {
            ascs[i] *= -1;
        }
        else {
            ascs[i] = 1;
        }
    }
    var rows = tbody.rows, rlen = rows.length, arr = new Array(), i, j, cells, clen;
    // fill the array with values from the table
    for(i = 0; i < rlen; i++){
    cells = rows[i].cells;
    clen = cells.length;
    arr[i] = new Array();
        for(j = 0; j < clen; j++){
        arr[i][j] = cells[j].innerHTML;
        }
    }
    // sort the array by the specified column number (col) and order (asc)
    arr.sort(function(a, b){
        return (a[col] == b[col]) ? 0 : a[col].localeCompare(b[col], undefined, {numeric: true, sensitivity: 'base'}) == 1 ? asc : -1*asc;
    });
    for(i = 0; i < rlen; i++){
        arr[i] = "<td>"+arr[i].join("</td><td>")+"</td>";
    }
    tbody.innerHTML = "<tr>"+arr.join("</tr><tr>")+"</tr>";
}
</script>
<table class="sortable">
  <tr>
    <th onclick="sort_table(document.getElementById('the-table'), 0);">File</th>
    <th onclick="sort_table(document.getElementById('the-table'), 1);">Total score</th>
    <th onclick="sort_table(document.getElementById('the-table'), 2);">Methods</th>
    <th onclick="sort_table(document.getElementById('the-table'), 3);">Average score</th>
    <th onclick="sort_table(document.getElementById('the-table'), 4);">Highest score</th>
  </tr>
  <tbody id="the-table">
    <% @flog[:method_containers].each do |method_container| %>
    <tr>
      <% if method_container[:path].empty? %>
        <td><a href="#<%= method_container[:name].gsub(/[^a-z]+/, '_') %>"><%= method_container[:name] %></a></td>
      <% else %>
        <td><a href="#<%= method_container[:path].gsub(/[^a-z]+/, '_') %>"><%= method_container[:path] %></a></td>
      <% end %>
      <td><%= round_to_tenths  method_container[:total_score] %></td>
      <td><%= method_container[:methods].size %></td>
      <td><%= round_to_tenths method_container[:average_score] %></td>
      <td><%= round_to_tenths method_container[:highest_score] %></td>
    </tr>
  <% end %>
  </tbody>
</table>

<% @flog[:method_containers].each do |method_container| %>
  <% if method_container[:path].empty? %>
    <h2 id="<%= method_container[:name].gsub(/[^a-z]+/, '_') %>"></h2>
  <% else %>
    <h2 id="<%= method_container[:path].gsub(/[^a-z]+/, '_') %>"><%= link_to_filename(method_container[:path]) %></h2>
  <% end %>

    <% method_container[:methods].each do |full_method_name, method_info| %>
      <% path, line = method_info[:path].split(":") if method_info[:path] %>
      <p><%= link_to_filename(path, line, full_method_name) %></p>
      <p>Total Score: <%= round_to_tenths method_info[:score]%></p>
      <table>
        <tr>
          <th>Score</th>
          <th>Operator</th>
        </tr>
        <% method_info[:operators].each do |operator, score| %>
          <tr>
            <td><%= round_to_tenths score %></td>
            <td><%= operator %></td>
          </tr>
        <% end %>
      </table>
    <% end %>
<% end %>

<%= render_partial 'report_footer' %>
